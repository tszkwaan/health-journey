// Prisma schema for health-journey
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CONSULTATION
  COMPLETED
  CANCELLED
}

model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  name         String?
  email        String   @unique
  passwordHash String
  role         Role
  dateOfBirth  DateTime?

  // VoiceAI consent
  voiceAIConsent Boolean @default(false)

  // Relations
  reservations Reservation[]
  doctorProfile Doctor?
  medicalBackgrounds MedicalBackground[]
  auditLogs AuditLog[]
  consentRecords ConsentRecord[]
}

model Doctor {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Basic info
  name        String
  email       String   @unique
  specialization String?
  bio         String?
  phone       String?
  
  // Working hours (9 AM to 6 PM by default)
  startTime   String   @default("09:00") // HH:MM format
  endTime     String   @default("18:00") // HH:MM format
  slotDuration Int     @default(60) // minutes
  
  // Relations
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  timeSlots   TimeSlot[]
}

model TimeSlot {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Slot timing
  date        DateTime // Date of the slot
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  
  // Availability
  isAvailable Boolean  @default(true)
  
  // Relations
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  reservation Reservation?
}

model Reservation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Reservation details
  status      ReservationStatus @default(PENDING)
  notes       String?
  
  // Relations
  patientId   String
  patient     User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  timeSlotId  String   @unique
  timeSlot    TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  intakeSessionId String? @unique
  intakeSession IntakeSession? @relation(fields: [intakeSessionId], references: [id])
  consultationSessionId String? @unique
  consultationSession ConsultationSession? @relation(fields: [consultationSessionId], references: [id])
}

model IntakeSession {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Session data
  sessionId   String   @unique // The UUID used in the frontend
  currentStep String
  answers     Json     // Store the intake answers as JSON
  flags       Json     // Store flags like editMode, skipped fields
  progress    Int      // 0-100
  reservationId String? // Store the reservation ID for linking
  completeTranscript Json? // Store the complete transcript with timestamps

  // Relations
  reservation Reservation?
}

model ConsultationSession {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Session data
  reservationId String   @unique
  transcript   Json?    // Store the consultation transcript with timestamps
  doctorNotes  String?  // Store doctor's notes
  isRecording  Boolean  @default(false)
  startedAt    DateTime?
  endedAt      DateTime?

  // Relations
  reservation Reservation?
  forms       ConsultationForm[]
}

model ConsultationForm {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Form data
  formType    String   // e.g., "diagnosis", "prescription", "treatment_plan"
  formData    Json     // Store the filled form data
  isGenerated Boolean  @default(false) // Whether it was AI-generated
  isCompleted Boolean  @default(false) // Whether doctor has reviewed/completed it
  
  // Relations
  consultationSessionId String
  consultationSession   ConsultationSession @relation(fields: [consultationSessionId], references: [id], onDelete: Cascade)
}

model MedicalBackground {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Version tracking
  version     Int      @default(1)
  isCurrent   Boolean  @default(true)
  
  // Patient relation
  patientId   String
  patient     User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Medical conditions
  pastMedicalConditions Json? // Array of selected conditions
  otherMedicalCondition String?
  
  // Surgical & hospitalization history
  surgicalHistory Json? // Array of {year, type, reason, dateRange}
  
  // Medications
  medications Json? // Array of {name, dosage, frequency}
  
  // Allergies
  allergies   Json? // Array of {type, reaction, other}
  otherAllergy String?
  
  // Family history
  familyHistory Json? // Array of selected conditions
  otherFamilyHistory String?
  
  // Lifestyle
  smoking     Json? // {smokes: boolean, packsPerDay?, yearsSmoked?}
  alcohol     Json? // {drinks: boolean, type?, frequency?, amount?}
  exerciseFrequency String?
  occupation  String?
  
  // Reproductive & women's health
  menstrualCycle String?
  menopause     String?
  pregnancyHistory Json? // Array of {year, type}
  contraceptives Json? // Array of selected contraceptives
  
  // Immunizations
  immunizations Json? // Array of {type, date?, other?}
  otherImmunization String?
  
  // LLM Summary
  llmSummary  String? // AI-generated summary of medical history
  
  // Enhanced Summary with Citations
  enhancedSummary Json? // Structured summary with citations: { currentSituation, mainConcerns, medicalBackground, aiDiagnosis, aiSuggestions, citations }
  
  // Relations
  versions    MedicalBackgroundVersion[]
}

model MedicalBackgroundVersion {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // Version data (snapshot of the medical background at this point)
  data        Json     // Complete snapshot of the medical background
  
  // Relations
  medicalBackgroundId String
  medicalBackground   MedicalBackground @relation(fields: [medicalBackgroundId], references: [id], onDelete: Cascade)
}

// Audit Trail Models
enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ACCESS_DENIED
  DATA_EXPORT
  DATA_IMPORT
  CONSENT_GRANTED
  CONSENT_REVOKED
  PHI_ACCESS
  FORM_GENERATED
  CONSULTATION_STARTED
  CONSULTATION_ENDED
  INTAKE_COMPLETED
}

enum AuditResource {
  USER
  RESERVATION
  MEDICAL_BACKGROUND
  INTAKE_SESSION
  CONSULTATION_SESSION
  CONSULTATION_FORM
  AUDIT_LOG
  SYSTEM
}

model AuditLog {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  
  // User information
  userId      String?     // Can be null for system events
  userRole    Role?       // Role of the user performing the action
  userEmail   String?     // Email for audit purposes (encrypted)
  
  // Action details
  action      AuditAction
  resource    AuditResource
  resourceId  String?     // ID of the resource being acted upon
  
  // Request details
  ipAddress   String?     // IP address of the request
  userAgent   String?     // User agent string
  sessionId   String?     // Session ID for tracking
  
  // Data details
  oldValues   Json?       // Previous values (for updates)
  newValues   Json?       // New values (for creates/updates)
  metadata    Json?       // Additional metadata
  
  // Security details
  isSuccess   Boolean     @default(true)
  errorCode   String?     // Error code if action failed
  errorMessage String?    // Error message if action failed
  
  // PHI access tracking
  phiAccessed Boolean     @default(false)
  phiFields   String[]    // List of PHI fields accessed
  
  // Consent tracking
  consentRequired Boolean @default(false)
  consentGiven    Boolean @default(false)
  consentVersion  String? // Version of consent at time of action
  
  // Relations
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  consentRecords ConsentRecord[]
}

// Consent Management
enum ConsentType {
  DATA_PROCESSING
  VOICE_AI
  MEDICAL_RECORDS_ACCESS
  FORM_GENERATION
  EXTERNAL_SHARING
  RESEARCH_PARTICIPATION
}

enum ConsentStatus {
  GRANTED
  REVOKED
  EXPIRED
  PENDING
}

model ConsentRecord {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // User information
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Consent details
  consentType ConsentType
  status      ConsentStatus @default(PENDING)
  version     String        // Version of the consent form
  
  // Consent data
  consentText String        // The actual consent text shown to user
  grantedAt   DateTime?     // When consent was granted
  revokedAt   DateTime?     // When consent was revoked
  expiresAt   DateTime?     // When consent expires (if applicable)
  
  // Legal details
  ipAddress   String?       // IP address when consent was given
  userAgent   String?       // User agent when consent was given
  sessionId   String?       // Session ID when consent was given
  
  // Audit trail
  auditLogId  String?       // Reference to audit log entry
  auditLog    AuditLog?     @relation(fields: [auditLogId], references: [id])
}

// Data Encryption Keys
model EncryptionKey {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // Key details
  keyId       String   @unique // Unique identifier for the key
  algorithm   String   @default("AES-256-GCM")
  keyVersion  Int      @default(1)
  isActive    Boolean  @default(true)
  
  // Key metadata
  description String?
  createdBy   String?  // User ID who created the key
  
  // Relations
  encryptedFields EncryptedField[]
}

// Encrypted Field Tracking
model EncryptedField {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // Field details
  tableName   String   // Database table name
  fieldName   String   // Field name
  recordId    String   // Record ID
  
  // Encryption details
  keyId       String   // Encryption key used
  algorithm   String   @default("AES-256-GCM")
  iv          String   // Initialization vector
  tag         String?  // Authentication tag
  
  // Relations
  encryptionKey EncryptionKey @relation(fields: [keyId], references: [keyId])
}
