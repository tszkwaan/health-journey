{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/chongtszkwan/Documents/side-projects/health-journey/frontend/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var prisma: PrismaClient | undefined\n}\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') {\n  globalForPrisma.prisma = prisma\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;;AAOA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///Users/chongtszkwan/Documents/side-projects/health-journey/frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions } from 'next-auth'\nimport Credentials from 'next-auth/providers/credentials'\nimport bcrypt from 'bcrypt'\nimport { prisma } from '@/lib/prisma'\n\nexport const authOptions: NextAuthOptions = {\n  session: { strategy: 'jwt' },\n  providers: [\n    Credentials({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'text' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) return null\n        const user = await prisma.user.findUnique({ where: { email: credentials.email } })\n        if (!user) return null\n        const isValid = await bcrypt.compare(credentials.password, user.passwordHash)\n        if (!isValid) return null\n        return { id: user.id, name: user.name ?? undefined, email: user.email, role: user.role }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id\n        // @ts-expect-error custom role on token\n        token.role = (user as any).role\n      }\n      return token\n    },\n    async session({ session, token }) {\n      // @ts-expect-error custom id on session\n      session.user.id = token.id\n      // @ts-expect-error custom role on session\n      session.user.role = token.role\n      return session\n    },\n  },\n  pages: {\n    signIn: '/login',\n  },\n}\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }\n\n\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,IAAA,qKAAW,EAAC;YACV,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU,OAAO;gBAC1D,MAAM,OAAO,MAAM,4IAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAAE,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBAAE;gBAChF,IAAI,CAAC,MAAM,OAAO;gBAClB,MAAM,UAAU,MAAM,gHAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,YAAY;gBAC5E,IAAI,CAAC,SAAS,OAAO;gBACrB,OAAO;oBAAE,IAAI,KAAK,EAAE;oBAAE,MAAM,KAAK,IAAI,IAAI;oBAAW,OAAO,KAAK,KAAK;oBAAE,MAAM,KAAK,IAAI;gBAAC;YACzF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,wCAAwC;gBACxC,MAAM,IAAI,GAAG,AAAC,KAAa,IAAI;YACjC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,wCAAwC;YACxC,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC1B,0CAA0C;YAC1C,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAC9B,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC","debugId":null}}]
}